// Mocks generated by Mockito 5.4.4 from annotations
// in trivia_riverpod/test/providers/category_question_count_provider/category_question_count_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trivia_riverpod/models/category_question_count/category_question_count_model.dart'
    as _i3;
import 'package:trivia_riverpod/models/question_category/question_category.dart'
    as _i6;
import 'package:trivia_riverpod/models/trivia_config/trivia_config_model.dart'
    as _i8;
import 'package:trivia_riverpod/models/trivia_question/trivia_question.dart'
    as _i7;
import 'package:trivia_riverpod/service/network_service.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCategoryQuestionCountModel_1 extends _i1.SmartFake
    implements _i3.CategoryQuestionCountModel {
  _FakeCategoryQuestionCountModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkService extends _i1.Mock implements _i4.NetworkService {
  MockNetworkService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);

  @override
  _i5.Future<List<_i6.QuestionCategory>> getCategories() => (super.noSuchMethod(
        Invocation.method(
          #getCategories,
          [],
        ),
        returnValue: _i5.Future<List<_i6.QuestionCategory>>.value(
            <_i6.QuestionCategory>[]),
      ) as _i5.Future<List<_i6.QuestionCategory>>);

  @override
  _i5.Future<_i3.CategoryQuestionCountModel> getCategoryQuestionCount(
          int? categoryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoryQuestionCount,
          [categoryId],
        ),
        returnValue: _i5.Future<_i3.CategoryQuestionCountModel>.value(
            _FakeCategoryQuestionCountModel_1(
          this,
          Invocation.method(
            #getCategoryQuestionCount,
            [categoryId],
          ),
        )),
      ) as _i5.Future<_i3.CategoryQuestionCountModel>);

  @override
  _i5.Future<List<_i7.TriviaQuestion>> getTrivia({
    required _i8.TriviaConfigModel? config,
    int? numberOfQuestions = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTrivia,
          [],
          {
            #config: config,
            #numberOfQuestions: numberOfQuestions,
          },
        ),
        returnValue:
            _i5.Future<List<_i7.TriviaQuestion>>.value(<_i7.TriviaQuestion>[]),
      ) as _i5.Future<List<_i7.TriviaQuestion>>);
}
