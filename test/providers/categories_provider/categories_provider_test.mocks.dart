// Mocks generated by Mockito 5.4.4 from annotations
// in trivia_riverpod/test/providers/categories_provider/categories_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trivia_riverpod/models/question_category/question_category.dart'
    as _i5;
import 'package:trivia_riverpod/models/trivia_config/trivia_config_model.dart'
    as _i7;
import 'package:trivia_riverpod/models/trivia_question/trivia_question.dart'
    as _i6;
import 'package:trivia_riverpod/service/network_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkService extends _i1.Mock implements _i3.NetworkService {
  MockNetworkService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);

  @override
  _i4.Future<List<_i5.QuestionCategory>> getCategories() => (super.noSuchMethod(
        Invocation.method(
          #getCategories,
          [],
        ),
        returnValue: _i4.Future<List<_i5.QuestionCategory>>.value(
            <_i5.QuestionCategory>[]),
      ) as _i4.Future<List<_i5.QuestionCategory>>);

  @override
  _i4.Future<List<_i6.TriviaQuestion>> getTrivia(
          {required _i7.TriviaConfigModel? config}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTrivia,
          [],
          {#config: config},
        ),
        returnValue:
            _i4.Future<List<_i6.TriviaQuestion>>.value(<_i6.TriviaQuestion>[]),
      ) as _i4.Future<List<_i6.TriviaQuestion>>);
}
